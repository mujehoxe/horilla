name: Deploy Horilla

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: horilla_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcairo2-dev gcc

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      run: |
        cp .env.dist .env
        echo "DEBUG=True" >> .env
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/horilla_test" >> .env
        echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> .env

    - name: Run migrations
      run: |
        python manage.py makemigrations --check --dry-run
        python manage.py migrate

    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput

    - name: Run tests
      run: |
        python manage.py test --verbosity=2

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create production environment file
      run: |
        cat > .env.production << EOF
        # Production Environment Configuration
        DEBUG=False
        SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
        DATABASE_URL=postgres://postgres:postgres@db:5432/horilla
        ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
        CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}
        TIME_ZONE=UTC
        EOF

    - name: Build Docker images
      run: |
        docker compose build

    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r . deployment/
        cd deployment
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting Horilla deployment..."
        
        # Stop existing containers
        docker compose down || true
        
        # Remove old images to ensure fresh deployment
        docker system prune -f
        
        # Start the application
        docker compose up --build -d
        
        # Wait for services to be healthy
        echo "⏳ Waiting for services to start..."
        sleep 30
        
        # Check if services are running
        docker compose ps
        
        echo "✅ Deployment completed!"
        echo "📍 Application should be accessible at the configured URL"
        EOF
        chmod +x deploy.sh

    - name: Archive deployment files
      uses: actions/upload-artifact@v4
      with:
        name: horilla-deployment-${{ github.sha }}
        path: deployment/
        retention-days: 30

    - name: Deploy to server
      if: success()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT || 22 }}
        script: |
          # Create deployment directory
          mkdir -p ~/horilla-deployment
          cd ~/horilla-deployment
          
          # Download the latest deployment files (this step would need to be customized based on your setup)
          # For now, we'll assume files are transferred via another method
          
          echo "Deployment completed on server"

  deploy-shared-hosting:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Create shared hosting deployment package
      run: |
        mkdir -p shared-hosting-deployment
        cp -r . shared-hosting-deployment/
        cd shared-hosting-deployment
        
        # Create shared hosting environment file
        cat > .env << EOF
        DEBUG=False
        SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
        ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
        CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}
        TIME_ZONE=UTC
        DB_ENGINE=django.db.backends.sqlite3
        DB_NAME=horilla_production.sqlite3
        EOF
        
        # Create deployment script for shared hosting
        cat > deploy_shared.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting Horilla shared hosting deployment..."
        
        # Create virtual environment
        python3 -m venv venv
        source venv/bin/activate
        
        # Install dependencies
        pip install --upgrade pip
        pip install -r requirements.txt
        
        # Run migrations
        python manage.py makemigrations
        python manage.py migrate
        
        # Collect static files
        python manage.py collectstatic --noinput
        
        # Create admin user
        python manage.py createhorillauser --first_name admin --last_name admin --username admin --password admin --email admin@example.com --phone 1234567890 || echo "Admin user might already exist"
        
        # Create start script
        cat > start_horilla.sh << 'STARTEOF'
        #!/bin/bash
        cd $(dirname $0)
        source venv/bin/activate
        gunicorn --bind 0.0.0.0:8002 --workers 2 --timeout 60 horilla.wsgi:application
        STARTEOF
        
        chmod +x start_horilla.sh
        
        echo "✅ Shared hosting deployment completed!"
        echo "Run ./start_horilla.sh to start the application"
        EOF
        
        chmod +x deploy_shared.sh

    - name: Deploy to shared hosting
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SHARED_HOST }}
        username: ${{ secrets.SHARED_USERNAME }}
        key: ${{ secrets.SHARED_SSH_KEY }}
        script: |
          mkdir -p ~/horilla
          # The actual file transfer would happen here
          # You might use rsync or scp in a separate step
          echo "Shared hosting deployment initiated"

    - name: Archive shared hosting deployment
      uses: actions/upload-artifact@v4
      with:
        name: horilla-shared-hosting-${{ github.sha }}
        path: shared-hosting-deployment/
        retention-days: 30

  notification:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          Horilla deployment ${{ job.status }}!
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
