# Generated by Django 4.2.21 on 2025-07-31 07:02

from django.db import migrations, models, connection


def check_and_add_biometric_fields(apps, schema_editor):
    """
    Custom migration function to add biometric fields only if they don't exist
    """
    db_alias = schema_editor.connection.alias
    
    # Get the table name
    table_name = 'employee_employee'
    
    # Check if columns exist
    with connection.cursor() as cursor:
        # Get column names for the table
        if connection.vendor == 'postgresql':
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = %s
            """, [table_name])
        elif connection.vendor == 'sqlite':
            cursor.execute(f"PRAGMA table_info({table_name})")
        elif connection.vendor == 'mysql':
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = %s AND table_schema = DATABASE()
            """, [table_name])
        
        existing_columns = set()
        if connection.vendor == 'sqlite':
            # SQLite PRAGMA returns (cid, name, type, notnull, dflt_value, pk)
            existing_columns = {row[1] for row in cursor.fetchall()}
        else:
            # PostgreSQL and MySQL return column names directly
            existing_columns = {row[0] for row in cursor.fetchall()}
        
        # Add biometric_employee_id if it doesn't exist
        if 'biometric_employee_id' not in existing_columns:
            if connection.vendor == 'postgresql':
                cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN biometric_employee_id VARCHAR(255)")
            elif connection.vendor == 'sqlite':
                cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN biometric_employee_id VARCHAR(255)")
            elif connection.vendor == 'mysql':
                cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN biometric_employee_id VARCHAR(255)")
        
        # Add biometric_employee_name if it doesn't exist
        if 'biometric_employee_name' not in existing_columns:
            if connection.vendor == 'postgresql':
                cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN biometric_employee_name VARCHAR(255)")
            elif connection.vendor == 'sqlite':
                cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN biometric_employee_name VARCHAR(255)")
            elif connection.vendor == 'mysql':
                cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN biometric_employee_name VARCHAR(255)")


def reverse_biometric_fields(apps, schema_editor):
    """
    Reverse migration - remove biometric fields
    """
    with connection.cursor() as cursor:
        table_name = 'employee_employee'
        
        # Remove columns if they exist
        try:
            if connection.vendor == 'postgresql':
                cursor.execute(f"ALTER TABLE {table_name} DROP COLUMN IF EXISTS biometric_employee_id")
                cursor.execute(f"ALTER TABLE {table_name} DROP COLUMN IF EXISTS biometric_employee_name")
            elif connection.vendor == 'sqlite':
                # SQLite doesn't support DROP COLUMN easily, so we'll skip reverse for SQLite
                pass
            elif connection.vendor == 'mysql':
                cursor.execute(f"ALTER TABLE {table_name} DROP COLUMN biometric_employee_id")
                cursor.execute(f"ALTER TABLE {table_name} DROP COLUMN biometric_employee_name")
        except Exception:
            # If columns don't exist, that's fine
            pass


class Migration(migrations.Migration):

    dependencies = [
        ('employee', '0002_additional_models'),
    ]

    operations = [
        migrations.RunPython(
            check_and_add_biometric_fields,
            reverse_biometric_fields,
        ),
    ]
